* ocamlisp-lipcrepl

** Summary
This is a Lisp interpreter implemented in OCaml. It most closely resembles elisp.
Currently, it supports:

- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html][print]] function (with varargs, unlike many lisps...)
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html][basic arithmetic operators]] (+-*/)
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html][concat]] function
- read lisp from a single file (regardless of extension as of now)
- REP +L+ (read eval print)

** Prerequisites
Assuming one has OCaml installed and properly setup, the only non standard package currently is =menhir=.

Bash instructions:
#+BEGIN_SRC bash
opam install menhir
#+END_SRC

** Build
The build can be handled entirely by the =Makefile=.

Bash instructions:
#+BEGIN_SRC bash
make
#+END_SRC

If any errors occur, check the generated =output.log= file.

*** Clean
Note: cleaning the compiled files and anything else generated from the build makes merlin in editors wonky, so it's advised to keep =_build/= while editing or viewing code in an editor using merlin, but this will completely clean.

Bash instructions:
#+BEGIN_SRC bash
make clean
#+END_SRC

** Run
The binary created after build instructions is =main.native=. There are two ways to run this project:

*** Using a file
#+BEGIN_SRC
./main.native filename
#+END_SRC

For simplicity's sake, I've included a couple of files in the =sample/ directory=. You can do for example
#+BEGIN_EXAMPLE
./main.native sample/add.el
#+END_EXAMPLE

And if you want to check if the output is proper, you can view the file and evaluate yourself. Or since this lisp is very closely based on elisp, if have emacs installed, you can do

#+BEGIN_EXAMPLE
emacs --script sample/add.el
#+END_EXAMPLE

*** REP +L+ (read eval print)
#+BEGIN_SRC
./main.native
(your list instructions here)
#+END_SRC

For example:
#+BEGIN_EXAMPLE
./main.native
(print (+ 5 7))
#+END_EXAMPLE

Currently, to end instructions, enter =CTR-D=. If you enter an invalid expression (sexp) such as =(print 8))=, it fails.
